plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.7.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.10'
}

group = 'app.shamilton'

repositories {
    mavenCentral()
}

project.ext {
    versionFileLines = new File("src/nativeMain/kotlin/Version.kt").readLines()
    versionLine = versionFileLines.get(4)
    debianLine = versionFileLines.get(6)

    appVersion = versionLine.substring(1, versionLine.length()-1)
    debianVersion = debianLine.substring(1, debianLine.length()-1)
}

kotlin {
    def hostOs = System.getProperty("os.name")
    def isMingwX64 = hostOs.startsWith("Windows")
    def nativeTarget
    if (hostOs == "Mac OS X") nativeTarget = macosX64('native')
    else if (hostOs == "Linux") nativeTarget = linuxX64("native")
    else if (isMingwX64) nativeTarget = mingwX64("native")
    else throw new GradleException("Host OS "+hostOs+" is not supported in Kotlin/Native.")

    nativeTarget.with {
        binaries {
            executable {
                entryPoint = 'main'
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.4.0"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.0"
                implementation "com.soywiz.korlibs.korio:korio:2.2.1"
            }
        }
        nativeMain {

        }
        nativeTest {

        }
    }
}

tasks.create("buildSnap") {
    group "build"
    doFirst {
        if(System.getProperty("os.name") != "Linux") {
            throw new GradleException("Snaps can only be built on Linux.")
        }

	new File('snap/local').mkdirs()
        def src = new File('snap/snapcraft.yaml')
        def dst = new File('snap/local/snapcraft.yaml.orig')
        dst.write(src.text)
    }

    doLast {
        new File( 'snap/snapcraft.yaml' ).withWriter { w ->
            new File( 'snap/local/snapcraft.yaml.orig' ).eachLine { line ->
                if(line.startsWith("version:")) {
                    w << "version: '" + appVersion + "'\n"
                } else {
                    w << line + "\n"
                }
            }
        }

        exec {
            commandLine "snapcraft"
        }

        def src = new File('snap/local/snapcraft.yaml.orig')
        def dst = new File('snap/snapcraft.yaml')
        dst.write(src.text)
        delete("./snap/local/snapcraft.yaml.orig")
    }
}

tasks.create("buildRPM") {
    group "build"
    doFirst {
        if(System.getProperty("os.name") != "Linux") {
            throw new GradleException("RPMs can only be built on Linux.")
        }
        def src = new File('timecard.spec')
        def dst = new File('timecard.spec.orig')
        dst.write(src.text)

        new File( 'timecard.spec' ).withWriter { w ->
            new File( 'timecard.spec.orig' ).eachLine { line ->
                if(line.startsWith("Version:")) {
                    w << "Version:        " + appVersion + "\n"
                } else {
                    w << line + "\n"
                }
            }
        }

        exec {
            commandLine "rpmdev-setuptree"
        }
        exec {
            commandLine "spectool", "-g", "-R", "-f", "timecard.spec"
        }
    }

    doLast {
        exec {
            commandLine "rpmbuild", "-bb", "timecard.spec"
        }
        println "Built RPM to ~/rpmbuild/RPMS/"
        println "If you are uploading this package to a repository, ensure you run 'rpm --addsign ~/rpmbuild/RPMS/*/timecard-*.rpm'"


        def src = new File('timecard.spec.orig')
        def dst = new File('timecard.spec')
        dst.write(src.text)
        delete('timecard.spec.orig')
    }
}

tasks.create("buildDeb") {
    group "build"
    doFirst {
        if(System.getProperty("os.name") != "Linux") {
            throw new GradleException("Debs can only be built on Linux.")
        }

        // Executable
        copy {
            from "build/bin/native/releaseExecutable/"
            into "build/deb/timecard/"
            rename ("timecard.kexe", "timecard")
        }

        // Debian packaging files
        copy {
            from "deb/"
            into "build/deb/timecard/debian"
        }

        // Docs
        copy {
            from rootProject.files("LICENSE", "CHANGELOG.md", "README.md")
            into "build/deb/timecard"
        }

        // TODO: Convert CHANGELOG.md into build/debian/timecard/debian/changelog
        // Or maybe just ignore it and make a dummy changelog. It honestly seems like a lot of unnecessary work
        new File('build/deb/timecard/debian/changelog').withWriter { w ->
           w << "timecard ("+appVersion+"-"+debianVersion+") release; urgency=medium\n"
           w << "\n"
           w << "  * See https://github.com/Stephen-Hamilton-C/timecard/blob/main/CHANGELOG.md\n"
           w << "    for a full list of changes\n"
           w << "\n"
        }
        exec {
            workingDir "build/deb/timecard/debian"
            commandLine 'LANG=C echo " -- Stephen Hamilton <stephen.hamilton.c@gmail.com>  `date -R`' >> changelog
        }
    }

    doLast {
/*
        exec {
            workingDir "build/deb/timecard"
            commandLine "debuild -i -us -uc -b"
        }
*/
    }
}

