plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.7.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.10'
	id 'com.github.langmo.gradlensis' version '0.1.0'
}

group = 'app.shamilton'

repositories {
    mavenCentral()
}

project.ext {
    versionFileLines = new File("src/nativeMain/kotlin/Version.kt").readLines()
    versionLine = versionFileLines.get(4)
    debianLine = versionFileLines.get(6)

    appVersion = versionLine.substring(1, versionLine.length()-1)
    debianVersion = debianLine.substring(1, debianLine.length()-1)
}

kotlin {
    def hostOs = System.getProperty("os.name")
    def isMingwX64 = hostOs.startsWith("Windows")
    def nativeTarget
    if (hostOs == "Mac OS X") nativeTarget = macosX64('native')
    else if (hostOs == "Linux") nativeTarget = linuxX64("native")
    else if (isMingwX64) nativeTarget = mingwX64("native")
    else throw new GradleException("Host OS "+hostOs+" is not supported in Kotlin/Native.")

    nativeTarget.with {
        binaries {
            executable {
                entryPoint = 'main'
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.4.0"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.0"
                implementation "com.soywiz.korlibs.korio:korio:2.2.1"
            }
        }
        nativeMain {

        }
        nativeTest {

        }
    }
}

nsis {
    runIn = file(rootProject.projectDir)
	destinationFolder = file(rootProject.projectDir)
}

tasks {
	createInstaller {
		dependsOn "linkReleaseExecutableNative"
		doFirst {
		    def configFile = new File('config.nsis')
			def origConfigFile = new File('config.nsis.orig')
			origConfigFile.write(configFile.text)
			
			configFile.withWriter { w ->
			    origConfigFile.eachLine { line ->
				    if(line.startsWith("!define APP_VERSION")) {
					    w << "!define APP_VERSION \""+appVersion+"\"\n"
					} else {
						w << line + "\n"
				    }
				}
			}
		}
		
		doLast {
		    def origConfigFile = new File('config.nsis.orig')
			def configFile = new File('config.nsis')
			configFile.write(origConfigFile.text)
			delete('config.nsis.orig')
	    }
	}
}

tasks.create("buildSnap") {
    group "build"
    doFirst {
        if(System.getProperty("os.name") != "Linux") {
            throw new GradleException("Snaps can only be built on Linux.")
        }

    	new File('snap/local').mkdirs()
        def snapcraftFile = new File('snap/snapcraft.yaml')
        def origSnapcraftFile = new File('snap/local/snapcraft.yaml.orig')
        origSnapcraftFile.write(snapcraftFile.text)
    }

    doLast {
        def origSnapcraftFile = new File('snap/local/snapcraft.yaml.orig')
        def snapcraftFile = new File('snap/snapcraft.yaml')
        snapcraftFile.withWriter { w ->
            origSnapcraftFile.eachLine { line ->
                if(line.startsWith("version:")) {
                    w << "version: '" + appVersion + "'\n"
                } else {
                    w << line + "\n"
                }
            }
        }

        exec {
            commandLine "snapcraft"
        }

        snapcraftFile.write(origSnapcraftFile.text)
        delete("./snap/local/snapcraft.yaml.orig")
    }
}

tasks.create("buildRPM") {
    group "build"
    doFirst {
        if(System.getProperty("os.name") != "Linux") {
            throw new GradleException("RPMs can only be built on Linux.")
        }
        def specFile = new File('timecard.spec')
        def origSpecFile = new File('timecard.spec.orig')
        origSpecFile.write(specFile.text)

        specFile.withWriter { w ->
            origSpecFile.eachLine { line ->
                if(line.startsWith("Version:")) {
                    w << "Version:        " + appVersion + "\n"
                } else if(line.startsWith("Release:")) {
                    if (debianVersion != "") {
                        w << "Release:        " + debianVersion + "\n"
                    } else {
                        w << "\n"
                    }
                } else {
                    w << line + "\n"
                }
            }
        }

        exec {
            commandLine "rpmdev-setuptree"
        }
        exec {
            commandLine "spectool", "-g", "-R", "-f", "timecard.spec"
        }
    }

    doLast {
        exec {
            commandLine "rpmbuild", "-bb", "timecard.spec"
        }
        println "Built RPM to ~/rpmbuild/RPMS/"
        println "If you are uploading this package to a repository, ensure you run 'rpm --addsign ~/rpmbuild/RPMS/*/timecard-*.rpm'"


        def origSpecFile = new File('timecard.spec.orig')
        def specFile = new File('timecard.spec')
        specFile.write(origSpecFile.text)
        delete('timecard.spec.orig')
    }
}

tasks.create("buildDeb") {
    group "build"
    dependsOn "linkReleaseExecutableNative"
    doFirst {
        if(System.getProperty("os.name") != "Linux") {
            throw new GradleException("Debs can only be built on Linux.")
        }

        // Cleanup
        delete {
            delete "build/deb"
        }

        // Executable
        copy {
            from "build/bin/native/releaseExecutable/"
            into "build/deb/timecard/"
            rename ("timecard.kexe", "timecard")
        }

        // Debian packaging files
        copy {
            from "deb/"
            into "build/deb/timecard/debian"
        }

        // Docs
        copy {
            from rootProject.files("LICENSE", "CHANGELOG.md", "README.md")
            into "build/deb/timecard"
        }

        new File('build/deb/timecard/debian/changelog').withWriter { w ->
           def version = (debianVersion != "") ? appVersion+"-"+debianVersion : appVersion
           w << "timecard ("+version+") unstable; urgency=medium\n"
           w << "\n"
           w << "  * See https://github.com/Stephen-Hamilton-C/timecard/blob/main/CHANGELOG.md\n"
           w << "    for a full list of changes\n"
           w << "\n"
        }
        exec {
            workingDir "build/deb/timecard/debian"
            environment LANG: "C"
            commandLine 'sh', '-c', 'echo " -- Stephen Hamilton <stephen.hamilton.c@gmail.com>  `date -R`" >> changelog'
        }
    }

    doLast {
        exec {
            workingDir "build/deb/timecard"
            commandLine "debuild", "-i", "-us", "-uc", "-b"
        }
    }
}

